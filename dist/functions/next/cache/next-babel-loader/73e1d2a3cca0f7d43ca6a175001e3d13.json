{
  "ast": null,
  "code": "import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/msnajib/Documents/najib/Dhakon/dhakon-app/node_modules/reusecore/src/elements/Input/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputField, { EyeButton } from './input.style';\n\nconst Input = (_ref) => {\n  let {\n    label,\n    value,\n    onBlur,\n    onFocus,\n    onChange,\n    inputType,\n    isMaterial,\n    icon,\n    iconPosition,\n    passwordShowHide,\n    className,\n    placeholder\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"value\", \"onBlur\", \"onFocus\", \"onChange\", \"inputType\", \"isMaterial\", \"icon\", \"iconPosition\", \"passwordShowHide\", \"className\", \"placeholder\"]);\n\n  // use toggle hooks\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    toggle: false,\n    focus: false,\n    value: ''\n  }); // toggle function\n\n  const handleToggle = () => {\n    setState(_objectSpread({}, state, {\n      toggle: !state.toggle\n    }));\n  }; // add focus class\n\n\n  const handleOnFocus = event => {\n    setState(_objectSpread({}, state, {\n      focus: true\n    }));\n    onFocus(event);\n  }; // remove focus class\n\n\n  const handleOnBlur = event => {\n    setState(_objectSpread({}, state, {\n      focus: false\n    }));\n    onBlur(event);\n  }; // handle input value\n\n\n  const handleOnChange = event => {\n    setState(_objectSpread({}, state, {\n      value: event.target.value\n    }));\n    onChange(event.target.value);\n  }; // get input focus class\n\n\n  const getInputFocusClass = () => {\n    if (state.focus === true || state.value !== '') {\n      return 'is-focus';\n    } else {\n      return '';\n    }\n  }; // init variable\n\n\n  let inputElement, htmlFor; // Add all classs to an array\n\n  const addAllClasses = ['reusecore__input']; // Add is-material class\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // Add icon position class if input element has icon\n\n\n  if (icon && iconPosition) {\n    addAllClasses.push(`icon-${iconPosition}`);\n  } // Add new class\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // if lable is not empty\n\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // if lable is not empty\n\n\n  if (placeholder) {\n    htmlFor = placeholder.replace(/\\s+/g, '_').toLowerCase();\n  } // Label position\n\n\n  const LabelPosition = isMaterial === true ? 'bottom' : 'top'; // Label field\n\n  const LabelField = label && __jsx(\"label\", {\n    htmlFor: htmlFor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, label); // Input type check\n\n\n  switch (inputType) {\n    case 'textarea':\n      inputElement = __jsx(\"textarea\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        placeholder: placeholder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }));\n      break;\n\n    case 'password':\n      inputElement = __jsx(\"div\", {\n        className: \"field-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, __jsx(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: state.toggle ? 'password' : 'text',\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        placeholder: placeholder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })), passwordShowHide && __jsx(EyeButton, {\n        onClick: handleToggle,\n        className: state.toggle ? 'eye' : 'eye-closed',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      })));\n      break;\n\n    default:\n      inputElement = __jsx(\"div\", {\n        className: \"field-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, __jsx(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: inputType,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus,\n        placeholder: placeholder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      })), icon && __jsx(\"span\", {\n        className: \"input-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, icon));\n  }\n\n  return __jsx(InputField, {\n    className: `${addAllClasses.join(' ')} ${getInputFocusClass()}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, LabelPosition === 'top' && LabelField, inputElement, isMaterial && __jsx(\"span\", {\n    className: \"highlight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }), LabelPosition === 'bottom' && LabelField);\n};\n/** Inout prop type checking. */\n\n\nInput.propTypes = {\n  /** className of the Input component. */\n  className: PropTypes.string,\n\n  /** Set input label value. */\n  label: PropTypes.string,\n\n  /** The input value, required for a controlled component. */\n  value: PropTypes.oneOf(['string', 'number']),\n\n  /** The input placeholder, required for a controlled component. */\n  placeholder: PropTypes.string,\n\n  /** Make default input into material style input. */\n  isMaterial: PropTypes.bool,\n\n  /** Password show hide icon button prop [*only for password field]. */\n  passwordShowHide: PropTypes.bool,\n\n  /** Set input type of the input element. Default type is text. */\n  inputType: PropTypes.oneOf(['text', 'email', 'password', 'number', 'textarea']),\n\n  /** Add icon in input field. This prop will not work with password\r\n   * and textarea field.\r\n   */\n  icon: PropTypes.object,\n\n  /** Set input field icon position. Default position is 'left'. */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   */\n  onChange: PropTypes.func\n};\n/** Inout default type. */\n\nInput.defaultProps = {\n  inputType: 'text',\n  isMaterial: false,\n  iconPosition: 'left',\n  onBlur: () => {},\n  onFocus: () => {},\n  onChange: () => {}\n};\nexport default Input;",
  "map": {
    "version": 3,
    "sources": [
      "/Users/msnajib/Documents/najib/Dhakon/dhakon-app/node_modules/reusecore/src/elements/Input/index.js"
    ],
    "names": [
      "React",
      "useState",
      "PropTypes",
      "InputField",
      "EyeButton",
      "Input",
      "label",
      "value",
      "onBlur",
      "onFocus",
      "onChange",
      "inputType",
      "isMaterial",
      "icon",
      "iconPosition",
      "passwordShowHide",
      "className",
      "placeholder",
      "props",
      "state",
      "setState",
      "toggle",
      "focus",
      "handleToggle",
      "handleOnFocus",
      "event",
      "handleOnBlur",
      "handleOnChange",
      "target",
      "getInputFocusClass",
      "inputElement",
      "htmlFor",
      "addAllClasses",
      "push",
      "replace",
      "toLowerCase",
      "LabelPosition",
      "LabelField",
      "join",
      "propTypes",
      "string",
      "oneOf",
      "bool",
      "object",
      "func",
      "defaultProps"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputField, { EyeButton } from './input.style';\r\nconst Input = ({\r\n  label,\r\n  value,\r\n  onBlur,\r\n  onFocus,\r\n  onChange,\r\n  inputType,\r\n  isMaterial,\r\n  icon,\r\n  iconPosition,\r\n  passwordShowHide,\r\n  className,\r\n  placeholder,\r\n  ...props\r\n}) => {\r\n  // use toggle hooks\r\n  const [state, setState] = useState({\r\n    toggle: false,\r\n    focus: false,\r\n    value: '',\r\n  });\r\n\r\n  // toggle function\r\n  const handleToggle = () => {\r\n    setState({\r\n      ...state,\r\n      toggle: !state.toggle\r\n    });\r\n  };\r\n\r\n  // add focus class\r\n  const handleOnFocus = event => {\r\n    setState({\r\n      ...state,\r\n      focus: true\r\n    });\r\n    onFocus(event);\r\n  };\r\n\r\n  // remove focus class\r\n  const handleOnBlur = event => {\r\n    setState({\r\n      ...state,\r\n      focus: false\r\n    });\r\n    onBlur(event);\r\n  };\r\n\r\n  // handle input value\r\n  const handleOnChange = event => {\r\n    setState({\r\n      ...state,\r\n      value: event.target.value\r\n    });\r\n    onChange(event.target.value);\r\n  };\r\n\r\n  // get input focus class\r\n  const getInputFocusClass = () => {\r\n    if (state.focus === true || state.value !== '') {\r\n      return 'is-focus';\r\n    } else {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  // init variable\r\n  let inputElement, htmlFor;\r\n\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__input'];\r\n\r\n  // Add is-material class\r\n  if (isMaterial) {\r\n    addAllClasses.push('is-material');\r\n  }\r\n\r\n  // Add icon position class if input element has icon\r\n  if (icon && iconPosition) {\r\n    addAllClasses.push(`icon-${iconPosition}`);\r\n  }\r\n\r\n  // Add new class\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  // if lable is not empty\r\n  if (label) {\r\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\r\n  }\r\n\r\n  // if lable is not empty\r\n  if (placeholder) {\r\n    htmlFor = placeholder.replace(/\\s+/g, '_').toLowerCase();\r\n  }\r\n\r\n  // Label position\r\n  const LabelPosition = isMaterial === true ? 'bottom' : 'top';\r\n\r\n  // Label field\r\n  const LabelField = label && <label htmlFor={htmlFor}>{label}</label>;\r\n\r\n  // Input type check\r\n  switch (inputType) {\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          {...props}\r\n          id={htmlFor}\r\n          name={htmlFor}\r\n          value={state.value}\r\n          onChange={handleOnChange}\r\n          onBlur={handleOnBlur}\r\n          onFocus={handleOnFocus}\r\n          placeholder={placeholder}\r\n        />\r\n      );\r\n      break;\r\n\r\n    case 'password':\r\n      inputElement = (\r\n        <div className=\"field-wrapper\">\r\n          <input\r\n            {...props}\r\n            id={htmlFor}\r\n            name={htmlFor}\r\n            type={state.toggle ? 'password' : 'text'}\r\n            value={state.value}\r\n            onChange={handleOnChange}\r\n            onBlur={handleOnBlur}\r\n            onFocus={handleOnFocus}\r\n            placeholder={placeholder}\r\n          />\r\n          {passwordShowHide && (\r\n            <EyeButton\r\n              onClick={handleToggle}\r\n              className={state.toggle ? 'eye' : 'eye-closed'}\r\n            >\r\n              <span />\r\n            </EyeButton>\r\n          )}\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      inputElement = (\r\n        <div className=\"field-wrapper\">\r\n          <input\r\n            {...props}\r\n            id={htmlFor}\r\n            name={htmlFor}\r\n            type={inputType}\r\n            value={state.value}\r\n            onChange={handleOnChange}\r\n            onBlur={handleOnBlur}\r\n            onFocus={handleOnFocus}\r\n            placeholder={placeholder}\r\n          />\r\n          {icon && <span className=\"input-icon\">{icon}</span>}\r\n        </div>\r\n      );\r\n  }\r\n\r\n  return (\r\n    <InputField\r\n      className={`${addAllClasses.join(' ')} ${getInputFocusClass()}`}\r\n    >\r\n      {LabelPosition === 'top' && LabelField}\r\n      {inputElement}\r\n      {isMaterial && <span className=\"highlight\" />}\r\n      {LabelPosition === 'bottom' && LabelField}\r\n    </InputField>\r\n  );\r\n};\r\n\r\n/** Inout prop type checking. */\r\nInput.propTypes = {\r\n  /** className of the Input component. */\r\n  className: PropTypes.string,\r\n\r\n  /** Set input label value. */\r\n  label: PropTypes.string,\r\n\r\n  /** The input value, required for a controlled component. */\r\n  value: PropTypes.oneOf(['string', 'number']),\r\n\r\n  /** The input placeholder, required for a controlled component. */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Make default input into material style input. */\r\n  isMaterial: PropTypes.bool,\r\n\r\n  /** Password show hide icon button prop [*only for password field]. */\r\n  passwordShowHide: PropTypes.bool,\r\n\r\n  /** Set input type of the input element. Default type is text. */\r\n  inputType: PropTypes.oneOf([\r\n    'text',\r\n    'email',\r\n    'password',\r\n    'number',\r\n    'textarea'\r\n  ]),\r\n\r\n  /** Add icon in input field. This prop will not work with password\r\n   * and textarea field.\r\n   */\r\n  icon: PropTypes.object,\r\n\r\n  /** Set input field icon position. Default position is 'left'. */\r\n  iconPosition: PropTypes.oneOf(['left', 'right']),\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onBlur: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onFocus: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   */\r\n  onChange: PropTypes.func\r\n};\r\n\r\n/** Inout default type. */\r\nInput.defaultProps = {\r\n  inputType: 'text',\r\n  isMaterial: false,\r\n  iconPosition: 'left',\r\n  onBlur: () => {},\r\n  onFocus: () => {},\r\n  onChange: () => {}\r\n};\r\n\r\nexport default Input;\r\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
